# V23: 1. Exercise - 'baby_names'
# (1) Wie viele Einträge gibt es insgesamt in der Tabelle baby_names?
	SELECT COUNT(*) FROM baby_names

# (2)  Wie viele männliche Personen (gender = M) wurden im Jahr 2010 geboren, die „Alex“ heißen?
	SELECT COUNT(*) FROM baby_names WHERE 
		("name" = 'Alex' AND "gender" = 'M' AND "year" = 2010)

# (3) Wie viele unterschiedliche Namen gibt es in unserer Tabelle… wenn:
# (3-1) Das Geschlecht egal ist (d.h. "Alex" für das Geschlecht M und "Alex" für das Geschlecht "F" zählt als der gleiche Name)
	SELECT COUNT(DISTINCT("name")) FROM baby_names 

# (3-2) Das Geschlecht nicht egal ist (d.h. "Alex" für das Geschlecht M und "Alex" für das Geschlecht "F" zählen als 2 unterschiedliche Namen)
	SELECT COUNT(DISTINCT("name", "gender")) FROM baby_names 

# (4) Welcher Baby-Name wurde in einem bestimmten Jahr exakt 19250 mal vergeben?
	SELECT * FROM baby_names WHERE count = 19250

# (5) Gibt es das Geschlecht „divers“ in unserer Tabelle? Kannst du das mit den dir bisher bekannten Befehlen herausfinden?
	SELECT DISTINCT("gender") FROM baby_names  

# V32: 2. Exercise - 'baby_names'
# (1) Wie viele unterschiedliche Vornamen gibt es, die mit „Alex“ anfangen, „Alex“ eingeschlossen? Hierbei spielt das Geschlecht keine Rolle.
	SELECT COUNT(DISTINCT("name")) FROM baby_names WHERE "name" LIKE 'Alex%' # -> 20 

# (2) Wie viele unterschiedliche Vornamen gibt es, in denen im Vornamen ein „m“ enthalten ist? Das „m“ darf auch an erster Stelle stehen.  
	SELECT COUNT(DISTINCT("name")) FROM baby_names WHERE "name" LIKE '%m%' OR "name" LIKE 'M%' # -> 1183	

# (3) Wie viele Zeilen gibt es in der Tabelle, bei denen das Jahr im 20. Jahrhundert (1900 bis einschließlich 1999) ist?
#     -> einmal mit BETWEEN einmal ohne
	SELECT COUNT("year") FROM baby_names WHERE "year" BETWEEN 1900 AND 1999      # -> 100
	SELECT COUNT("year") FROM baby_names WHERE "year" >= 1900 AND "year" <= 1999 # -> 100

# (4) Wie viele Zeilen gibt es in der Tabelle, bei denen das Jahr im 20. Jahrhundert (1900 bis einschließlich 1999) ist, und durch 10 Teilbar ist?
#	  -> Löse diese Aufgabe mit vielen ORs
#	  -> Löse diese Aufgabe mit einem WHERE IN()
# 	  -> Löse die Aufgabe mit einem LIKE
#     -> Löse diese Aufgabe mit einem Modulo
	SELECT COUNT("year") FROM baby_names WHERE 
		"year" = 1900 OR "year" = 1910 OR "year" = 1920 OR "year" = 1930 OR
	    "year" = 1940 OR "year" = 1950 OR "year" = 1960 OR "year" = 1970 OR
	    "year" = 1980 OR "year" = 1990           							   # -> 15307

	SELECT COUNT("year") FROM baby_names WHERE 
		"year" IN (1990, 1980, 1970, 1960, 1950, 1940, 1930, 1920, 1910, 1900) # -> 15307

	SELECT COUNT("year") FROM baby_names WHERE year::varchar LIKE '19_0'       # -> 15307

	SELECT COUNT("year") FROM baby_names WHERE 								   # -> 15307
		"year"%10 = 0 AND year BETWEEN 1900 AND 1999

# V41: 3. Exercise - 'baby_names'
# (1) Welcher Vorname kam insgesamt (d.h. für ein beliebiges Geschlecht in einem beliebigen Jahr) am häufigsten vor?
	SELECT * FROM baby_names ORDER BY "count" DESC LIMIT 3 # -> Linda

# (2) Welches Jahr ist das erste Jahr in unserer Datenbasis?
#		-> Löse dies mit Hilfe der MIN()-Funktion
#		-> Löse dies ohne die MIN()-Funktion
	SELECT MIN("year") FROM baby_names                               # -> 1880
	SELECT DISTINCT("year") FROM baby_names ORDER BY "year" LIMIT 5  # -> 1880

# (3) Wie viele unterschiedliche Vornamen gibt es, die aus exakt 5 Buchstaben bestehen?
#		-> Löse dies mit einem WHERE und der LENGTH()-Funktion
#		-> Löse dies mit einem WHERE und einem LIKE (hier gab es einen speziellen Platzhalter)
	SELECT COUNT(DISTINCT("name")) FROM baby_names WHERE LENGTH("name") = 5  # -> 1590
	SELECT COUNT(DISTINCT("name")) FROM baby_names WHERE "name" LIKE '_____' # -> 1590

# (4) Wie viele Babys sind für das Jahr 2000 insgesamt in unserer Datenbasis? Berechne hier die Summe aller Einträge!
	SELECT SUM(count) FROM baby_names WHERE year = 2020 # -> 3.320.671

# (5) Wenn wir alle unterschiedlichen Vornamen betrachten (Geschlecht ist egal), und aufsteigend alphabetisch sortieren… 
#     Welcher Vorname steht auf der 2. Seite ganz oben, wenn die erste Seite aus 10 Einträgen besteht?
	SELECT DISTINCT("name") FROM baby_names ORDER BY "name" OFFSET 10 LIMIT 1 # -> Aarna

# V54: 4. Exercise - 'locations'
# (1) Leider hat sich in diesen Daten ein kleiner Fehler eingeschlichen. Die Adresse der „Buchhandlung DOM“ ist das 
#     Domkloster 4 und nicht das Domkloster 1. Aktualisiere daher die Daten mit einem UPDATE-Befehl.
#		- Hinweis 1: Beachte hierbei, dass die Stadt und die Postleitzahl erhalten bleibt
#		- Hinweis 2: Genau aus diesem Grund speichert man die Adresse oft aufgeteilt in verschiedenen Feldern in der Datenbank, 
#                    d.h. 1 Feld für die Straße, eins für die Stadt, eins für die Postleitzahl,…
	UPDATE locations SET address = 'Domkloster 4, 50667 Köln' WHERE address = 'Domkloster 1, 50667 Köln' 

# (2) Die Buchhandlung Alexanderplatz musste Anfang dieses Monats geschlossen werde. Entferne sie daher aus der Datenbank!
	DELETE FROM locations WHERE id = 2

# (3) Eine neue Buchhandlung soll nach nur 20 Jahren Bauzeit noch diesen Monat in Berlin eröffnet werden. Füge daher folgenden 
#     Eintrag in die Datenbank ein:
#		- Titel: Buchhandlung Flughafen BER
#		- Adresse: Melli-Beese-Ring 1, 12529 Schönefeld, Deutschland
	INSERT INTO locations ("title", "address") VALUES ('Buchhandlung Flughafen BER', 'Melli-Beese-Ring 1, 12529 Schönefeld, Deutschland')

# V79: 5. Exercise Tabellen verwalten
# (1) Erstelle eine Tabelle („newsletter“), in der wir die Registrierungen für einen Newsletter abspeichern können.
#     Wir benötigen folgende Spalten:
#		ID
#		E-Mail-Adresse vom Kunden (zwingend benötigt)
#		Name vom Kunden (optional)
#		Alter in Jahren (optional)
		CREATE TABLE newsletter (
		    ID SERIAL PRIMARY KEY,
		    EMail VARCHAR(1000) NOT NULL,
		    Name VARCHAR(1000),
		    Alter INTEGER
		)


# (2) Tabellen abändern
#     Füge anschließend folgende Spalte zu der Tabelle noch hinzu:
#		Datenschutzvereinbarung akzeptiert: Datentyp: BOOLEAN Standardmäßig ausgefüllt mit FALSE
		ALTER TABLE newsletter 
			ADD COLUMN Datenschutz BOOLEAN NOT NULL DEFAULT FALSE

# V97 6. Exercise SUBSELECTS - Versuche, alle Aufgaben jeweils mit exakt einer Query zu lösen!
#        Betrachte die Tabelle books. In der Spalte „language“ ist die jeweilige Sprache von einem jeden Buch notiert.
# (1) Wie viel % der Bücher sind in deutscher Sprache? Versuche dies mit einer Query zu lösen!
#     > Tipp 1: Mit einem SELECT (SUBQUERY), (SUBQUERY) kannst du 2 komplett unterschiedliche Subqueries an die Datenbank schicken, sofern sie 
#               jeweils nur einen Wert aggregieren (z.B. die Anzahl ermitteln,…). Es wird hier nicht zwingend die Angabe einer Tabelle benötigt!
#     > Tipp 2: Auch kannst du die Ergebnisse direkt miteinander verrechnen: SELECT (SUBQUERY) / (SUBQUERY). Wichtig: Funktioniert so nur in
#               MySQL, unter PostgreSQL gibt es noch was zu beachten – siehe Musterlösung.
		# --> How to divide the two relevant columns..?!
		SELECT
    		(SELECT COUNT(*) from books WHERE language = 'de')::float /  / # Amount of german books
    		(SELECT COUNT(*) from books)::float /                          # Amount of all books


# (2) Betrachte die Tabelle books. Jedes Buch hat ein Thema / eine Kategorie, die entsprechende Information hierzu findet sich in der Tabelle 
#     books_subjects. Erstelle eine Auflistung aller Bücher inkl. dem jeweiligen Thema!
		SELECT title, 
		    (SELECT title FROM books_subjects 
		        	WHERE books.subject_id = books_subjects.id) AS Category
		FROM books

# (3) Betrachte die Tabelle books_subjects, ein Thema kann von mehreren Büchern verwendet werden. Wie oft kommt das beliebteste Thema vor?
#     Bzw. anders ausgedrückt: Zu welchem Thema gibt es am meisten Bücher, und wie viele Bücher sind das?
		SELECT title,
		    (SELECT COUNT(*) FROM books 
		            WHERE books.subject_id = books_subjects.id) AS topic_freq
		FROM books_subjects ORDER BY topic_freq DESC

# (4) Betrachte die Tabelle books. Welcher Autor hat bisher am meisten Bücher veröffentlicht?
# 	  > Tipp 1: Ermittle also zuerst alle unterschiedlichen Autoren, die es in der Tabelle gibt
#	  > Tipp 2: Erweitere anschließend die Query, sodass für jeden gefundenen Autor eine Subquery gestartet wird, die zu diesem Autor die
#               entsprechende Anzahl an Büchern ermittelt
#     > Tipp 3: Beachte hierbei, dass hier das Subselect 2x auf der gleichen Tabelle ausgeführt wird – hier wirst du die Tabellen also u.U. 
#               mit einem AS benennen müssen!
# ---> Hinweis: Das würde mit einem GROUP BY sehr viel effizienter gehen – das haben wir uns aber noch nicht angeschaut…
		SELECT DISTINCT(creator),
		    (SELECT COUNT(*) FROM books AS books_new 
		            WHERE books_new.creator = books_old.creator) AS amount_books
		FROM books AS books_old ORDER BY amount_books DESC


 